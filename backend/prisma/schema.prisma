datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Division {
  id        String   @id @default(uuid())
  name      String
  slug      String   @unique
  admins    Admin[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Admin {
  id         String   @id @default(uuid())
  email      String   @unique
  name       String
  division   Division @relation(fields: [divisionId], references: [id])
  divisionId String
  Contest    Contest[]
  Workshop    Workshop[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum UserType {
  INTERNAL
  EXTERNAL
}

enum Category {
  INTERMEDIATE
  ADVANCED
}

// --- Simplified User Model ---
model User {
  id        String   @id @default(uuid())
  email     String   @unique
  name      String
  type      UserType @default(EXTERNAL)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  contest   Contest? @relation("UserContest")
  workshop  Workshop? @relation("UserWorkshop")
  talkshow  Talkshow? @relation("UserTalkshow")
}

model Contest {
  id             String    @id @default(uuid())
  creation       Creation?
  userId         String    @unique
  user           User      @relation("UserContest", fields: [userId], references: [id])

  category       Category? @default(INTERMEDIATE)
  age            Int?
  whatsapp       String?
  proofOfPayment String?
  valid          Boolean?

  nrp            String?
  batch          Int?
  major          String?
  ktmPath        String?

  instance       String?
  idCardPath     String?

  adminId        String?
  admin          Admin?    @relation(fields: [adminId], references: [id])

  submitted      Boolean   @default(false)

  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  @@index([userId])
  @@index([adminId])
}

model Creation{
  id             String    @id @default(uuid())
  creationPath   String?
  conceptPath    String?

  contestId      String    @unique  // <--- Enforces one-to-one relationship
  contest        Contest?  @relation(fields: [contestId], references: [id])

  submitted      Boolean   @default(false)

  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  @@index([contestId])
}

enum AsalType {
  Petra
  Umum
}
enum TalkshowType {
  TALKSHOW_1
  TALKSHOW_2
  WEBINAR
}

model Talkshow {
  id                String    @id @default(uuid())
  userId            String    @unique
  user              User      @relation("UserTalkshow", fields: [userId], references: [id])    
  wa                String?
  idline            String?
  nrp               String?   // Nullable
  jurusan           String?   // Nullable
  type              TalkshowType
  submitted         Boolean   @default(false)

  created_at        DateTime  @default(now())
  updated_at        DateTime  @updatedAt

  @@unique([userId, type])
}

model Workshop {
  id                String    @id @default(uuid())
  userId            String    @unique
  user              User      @relation("UserWorkshop", fields: [userId], references: [id])    
  wa                String?
  idline            String?
  nrp               String?   // Nullable
  jurusan           String?   // Nullable
  proofOfPayment    String?
  valid             Boolean?   @default(false) // 0 = belum bayar
  submitted         Boolean   @default(false)

  adminId           String?
  admin             Admin?    @relation(fields: [adminId], references: [id])
  created_at        DateTime  @default(now())
  updated_at        DateTime  @updatedAt
}